seperate dashboards is checked and it should be more user freindly
but we should have single login and signup pages let users select their roles. they should have role selecetion built within the UI
 USERS
 1. farmers
 2. farm-managers
 3. Agricultural experts
 
 
 ADMIN: the admin should have the following
Manage Users: Create, update, or delete users (farmers, managers, experts).

Manage Farms: Add, assign, or review farms and their status.

Analytics: View system-level analytics (e.g., number of users, farm statistics).
both the front-end and backend of this application.
ManageUsers.jsx: User CRUD operations.

ManageFarms.jsx: Farm-specific actions.
1. in the front-End please note if creating a login and signup pages. navigate to each dashboard by roles specified.
criteria login email and password. farmId not reccomended for now.

Fuctionality of the system
1.  What are the means of communications in this system
2. Goal: to connect Farmers with Farm-managers and Agricultural experts together
3. How do we get Connected.


#####################################################################
#####################################################################
How Can they Have Conversations.
1.Implememting Chatting here in this application.
2. Ability to display user's profile: if a farmer updates his profile a farm-manager should be able to view the farmer's profile, and other logged-in users should be able to view the profiles.
3. Admin should be able to view all profiles, logged-in-users and logged-out users.

###########################################
###########################################
Now Stack-Flow of this Application
1. When a Farmer clicks on the Farm-Manager profile while after seacrhing for Available Farm-Manager.
he cannot have conversations on this application with the Farm-managers.

agrofarm-frontend/
├── public/
│   └── index.html
├── src/
│
├── assets/
│   └── images/
│   └── icons/
│   └── illustrations/
│
├── components/
│   └── common/
│       ├── Navbar.jsx
│       ├── Sidebar.jsx
│       ├── Footer.jsx
│       └── Loader.jsx
│   └── messaging/
│       ├── ChatBox.jsx
│       ├── MessageList.jsx
│       ├── UserList.jsx
│       └── NotificationBadge.jsx
│
├── contexts/
│   └── AuthContext.jsx
│   └── SocketContext.jsx
│
├── hooks/
│   └── useAuth.js
│   └── useSocket.js
│   └── useUnreadMessages.js
│
├── layouts/
│   └── MainLayout.jsx
│   └── DashboardLayout.jsx
│
├── pages/
│   └── Login.jsx
│   └── Register.jsx
│   └── NotFound.jsx
│
├── roles/
│   ├── farmer/
│   │   ├── components/
│   │   │   └── TaskList.jsx
│   │   ├── pages/
│   │   │   └── Dashboard.jsx
│   │   └── FarmerRoutes.jsx
│   │
│   ├── manager/
│   │   ├── components/
│   │   ├── pages/
│   │   └── ManagerRoutes.jsx
│   │
│   ├── expert/
│   │   ├── components/
│   │   │   └── RecommendationPanel.jsx
│   │   ├── pages/
│   │   │   └── Dashboard.jsx
│   │   └── ExpertRoutes.jsx
│   │
│   └── owner/
│       ├── components/
│       ├── pages/
│       └── OwnerRoutes.jsx
│
├── routes/
│   └── ProtectedRoute.jsx
│   └── AppRoutes.jsx
│
├── services/
│   ├── api.js
│   ├── authService.js
│   ├── userService.js
│   ├── messageService.js
│   └── expertService.js
│
├── styles/
│   ├── tailwind.css
│   └── globals.module.css
│
├── utils/
│   └── validators.js
│   └── formatDate.js
│
├── App.jsx
├── main.jsx
└── index.css


Role	Description
Farmer	Performs tasks on the farm: planting, watering, harvesting, etc.
Manager	Oversees daily operations, assigns tasks, tracks performance
Expert	Provides recommendations on crops, soil, pests, and other agricultural needs
Owner	The person who owns the farm(s); can view reports, hire managers/farmers, and monitor operations.








farmer/
├── Dashboard.jsx          ← Shared layout with sidebar/header
├── index.jsx              ← Routes for all subpages
├── components/
│   ├── Sidebar.jsx
│   ├── Header.jsx
├── sections/
│   ├── FarmOverview.jsx
│   ├── Tasks.jsx
│   └── ChatArea.jsx







const mongoose = require('mongoose');

const ProfileSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true,
  },
  fullName: {
    type: String,
    required: true,
    trim: true,
  },
  avatarUrl: {
    type: String,
    default: '', // optional: store URL or path to avatar image
  },
  contactNumber: {
    type: String,
  },
  address: {
    street: String,
    city: String,
    state: String,
    postalCode: String,
    country: String,
  },
  bio: {
    type: String,
    maxlength: 500,
  },
  // Additional role-specific fields can go here or in separate models if needed
  expertiseAreas: [String],  // For agro-expert or farm-manager roles
  farmDetails: {
    farmName: String,
    farmSize: Number, // e.g. hectares or acres
    cropsGrown: [String],
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('Profile', ProfileSchema);



















import { useEffect, useState } from "react";
import { useNavigate } from 'react-router-dom';
import { getLoggedUser } from "../apiCalls/user";
import { useDispatch, useSelector } from "react-redux";
import { hideLoader, showLoader } from "../redux/loaderSlice";
import { setUser } from "../redux/usersSlice";
import toast from 'react-hot-toast';

function ProtectedRoute({ children }) {
  const dispatch = useDispatch();
  const { user } = useSelector(state => state.userReducer);
  const navigate = useNavigate();

  const getLoggedInUser = async () => {
    try {
      dispatch(showLoader());
      const response = await getLoggedUser();
      dispatch(hideLoader());

      if (response.success) {
        dispatch(setUser(response.data));
      } else {
        toast.error(response.message);
        navigate('/login');
      }
    } catch (error) {
      dispatch(hideLoader());
      toast.error(error.message);
      navigate('/login');
    }
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      getLoggedInUser();
    } else {
      navigate('/login');
    }
  }, [navigate]);

  return <>{children}</>;
}

export default ProtectedRoute;



///////////////////////////////////////////////////////////////////////
======================================================================
//////////////////////////////////////////////////////////////////////
=====================================================================
==================== ADMIN SECTIONS AND FUNCTIONALITY================

✅ 1. System Configuration & Settings
Update farm-wide system settings (e.g., limits, API keys, data retention policy).

Configure role permissions dynamically (RBAC).

Set up default preferences for new users.

✅ 2. Content Moderation
Review and delete inappropriate or outdated content.

Approve or reject submitted farm profiles or expert recommendations.

Manage FAQs, announcements, or platform-wide news.

✅ 3. Farm and Task Oversight
View and manage all farms registered in the system.

Assign or reassign farm-managers to specific farms.

Track progress of tasks across farms.

✅ 4. Audit Logs & Activity Tracking
Monitor logs for all system actions (user login, data edits, deletions).

See which users performed which actions.

Detect suspicious or unusual behavior.

✅ 5. Analytics & Reports
View dashboards with:

User growth

Farm production metrics

Task completion rates

Messaging activity

Export reports for stakeholders or regulatory use.

✅ 6. Messaging & Notifications
Broadcast announcements to all users or role-based groups (e.g., all managers).

Manage system-wide notifications.

View messaging traffic and unresolved support issues.

✅ 7. Data Integrity & Recovery
Restore soft-deleted users, profiles, or farms.

Backup or export data.

Initiate data cleanups if needed.

✅ 8. Support & Escalations
Respond to or reassign tickets submitted via a contact form.

Escalate technical or operational issues.

View submitted feedback and bug reports.

✅ 9. Subscription & Payment Management (if applicable)
View payment history or manage billing issues.

Approve or reject subscription upgrade/downgrade requests.

✅ 10. Security Management
Force logout or lock out compromised accounts.

Change roles/permissions in case of misuse.

Manage authentication settings (password policies, 2FA).









const Profile = require('../models/profileModel');

// Create or update profile
const createOrUpdateProfile = async (req, res) => {
  try {
    const userId = req.user._id; // assumes authentication middleware sets req.user

    const existingProfile = await Profile.findOne({ user: userId });

    if (existingProfile) {
      // Update existing profile
      const updatedProfile = await Profile.findOneAndUpdate(
        { user: userId },
        { ...req.body },
        { new: true, runValidators: true }
      );
      return res.status(200).json({ success: true, profile: updatedProfile });
    } else {
      // Create new profile
      const profile = new Profile({
        user: userId,
        ...req.body,
      });
      await profile.save();
      return res.status(201).json({ success: true, profile });
    }
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// Get profile for logged-in user
const getMyProfile = async (req, res) => {
  try {
    const userId = req.user._id;

    const profile = await Profile.findOne({ user: userId }).populate('user', 'firstname lastname email role');
    if (!profile) return res.status(404).json({ success: false, message: 'Profile not found' });

    res.status(200).json({ success: true, profile });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// Get profile by user ID (admin use)
const getProfileByUserId = async (req, res) => {
  try {
    const profile = await Profile.findOne({ user: req.params.userId }).populate('user', 'firstname lastname email role');
    if (!profile) return res.status(404).json({ success: false, message: 'Profile not found' });

    res.status(200).json({ success: true, profile });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// Update profile (partial)
const updateProfile = async (req, res) => {
  try {
    const updated = await Profile.findOneAndUpdate(
      { user: req.user._id },
      { $set: req.body },
      { new: true, runValidators: true }
    );

    if (!updated) return res.status(404).json({ success: false, message: 'Profile not found' });

    res.status(200).json({ success: true, profile: updated });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// Update only the image
const updateProfileImage = async (req, res) => {
  try {
    const { image } = req.body;

    const profile = await Profile.findOneAndUpdate(
      { user: req.user._id },
      { $set: { Image: image } },
      { new: true, runValidators: true }
    );

    if (!profile) return res.status(404).json({ success: false, message: 'Profile not found' });

    res.status(200).json({ success: true, profile });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// Delete profile
const deleteProfile = async (req, res) => {
  try {
    const deleted = await Profile.findOneAndDelete({ user: req.user._id });
    if (!deleted) return res.status(404).json({ success: false, message: 'Profile not found' });

    res.status(200).json({ success: true, message: 'Profile deleted successfully' });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

module.exports = {
  createOrUpdateProfile,
  getMyProfile,
  getProfileByUserId,
  updateProfile,
  updateProfileImage,
  deleteProfile,
};



// controllers/profileController.js

const Profile = require('./../models/profileModel');
const asyncErrorHandler = require('./../middlewares/asyncErrorHandler');
const Users = require('./../models/userModel');
const cloudinary = require('../utils/cloudinary'); // Ensure this exists and is properly configured

// Unified response helper
const sendResponse = (res, success, message, data = null, status = 200) => {
  return res.status(status).json({ success, message, data });
};

// Create Profile
exports.createProfile = asyncErrorHandler(async (req, res) => {
  const { fullName, phone, address, bio, expertiseAreas, farmDetails } = req.body;

  const existingProfile = await Profile.findOne({ user: req.user._id });
  if (existingProfile) {
    return sendResponse(res, false, "Profile already exists. Please update it.", null, 400);
  }

  const profile = new Profile({
    user: req.user._id,
    fullName,
    phone,
    address,
    bio,
    expertiseAreas,
    farmDetails
  });

  const newProfile = await profile.save();
  return sendResponse(res, true, "Profile created successfully.", newProfile);
});

// Get My Profile
exports.getMyProfile = asyncErrorHandler(async (req, res) => {
  const profile = await Profile.findOne({ user: req.user._id }).populate('user', '-password');
  if (!profile) return sendResponse(res, false, "Profile not found.", null, 404);
  return sendResponse(res, true, "Fetched profile successfully.", profile);
});

// Get All Profiles
exports.getAllProfiles = asyncErrorHandler(async (req, res) => {
  const profiles = await Profile.find({}).populate('user', '-password');
  if (!profiles.length) return sendResponse(res, false, "No profiles found.", null, 404);
  return sendResponse(res, true, "Fetched all profiles successfully.", profiles);
});

// Get Profile by User ID
exports.getProfileByUserId = asyncErrorHandler(async (req, res) => {
  const profile = await Profile.findOne({ user: req.params.userId }).populate('user', '-password');
  if (!profile) return sendResponse(res, false, "Profile does not exist.", null, 404);
  return sendResponse(res, true, "Fetched profile by user ID successfully.", profile);
});

// Update Profile
exports.updateProfile = asyncErrorHandler(async (req, res) => {
  const updates = req.body;
  const updatedProfile = await Profile.findOneAndUpdate(
    { user: req.user._id },
    { $set: updates },
    { new: true, runValidators: true }
  );
  if (!updatedProfile) return sendResponse(res, false, "Profile not found or not updated.", null, 404);
  return sendResponse(res, true, "Profile updated successfully.", updatedProfile);
});

// Upload Profile Image
exports.uploadProfileImage = asyncErrorHandler(async (req, res) => {
  if (!req.file) {
    return sendResponse(res, false, "No image file provided.", null, 400);
  }

  // Upload to Cloudinary
  const result = await cloudinary.uploader.upload(req.file.path, {
    folder: 'profileImages',
    transformation: [{ width: 500, height: 500, crop: 'limit' }]
  });

  const updatedProfile = await Profile.findOneAndUpdate(
    { user: req.user._id },
    { $set: { profileImage: result.secure_url } },
    { new: true }
  );

  if (!updatedProfile) return sendResponse(res, false, "Failed to update profile picture.", null, 400);
  return sendResponse(res, true, "Profile picture updated successfully.", updatedProfile);
});

// Delete Profile (Soft Delete)
exports.deleteProfile = asyncErrorHandler(async (req, res) => {
  const profile = await Profile.findOne({ user: req.user._id });

  if (!profile) return sendResponse(res, false, "Profile not found.", null, 404);

  // Optional: Set deleted flag, or actually remove
  await Profile.deleteOne({ user: req.user._id });

  return sendResponse(res, true, "Profile deleted successfully.");
});







///////
const Farm = require('../models/farmModel');
const asyncErrorHandler = require('../middlewares/asyncErrorHandler');
const sendResponse = require('../utils/sendResponse');

// Create a new farm
exports.createFarm = asyncErrorHandler(async (req, res) => {
  try {
    const { name, location, coordinates, size, soilType } = req.body;

    const farm = new Farm({
      name,
      location,
      coordinates,
      size,
      soilType,
      owner: req.user._id,
    });

    await farm.save();

    return sendResponse(res, true, 'Farm created successfully.', farm, 201);
  } catch (error) {
    return sendResponse(res, false, 'Failed to create farm.', error.message);
  }
});

// Get all farms (admin only or public view)
exports.getAllFarms = asyncErrorHandler(async (req, res) => {
  try {
    const farms = await Farm.find().populate('owner', '-password');
    return sendResponse(res, true, 'All farms fetched.', farms);
  } catch (error) {
    return sendResponse(res, false, 'Failed to fetch farms.', error.message);
  }
});

// Get farm by ID
exports.getFarmById = asyncErrorHandler(async (req, res) => {
  try {
    const farm = await Farm.findById(req.params.id).populate('owner', '-password');
    if (!farm) return sendResponse(res, false, 'Farm not found.', null, 404);
    return sendResponse(res, true, 'Farm fetched successfully.', farm);
  } catch (error) {
    return sendResponse(res, false, 'Failed to fetch farm.', error.message);
  }
});

// Update farm details
exports.updateFarm = asyncErrorHandler(async (req, res) => {
  try {
    const updatedFarm = await Farm.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );

    if (!updatedFarm) return sendResponse(res, false, 'Farm not found.', null, 404);
    return sendResponse(res, true, 'Farm updated successfully.', updatedFarm);
  } catch (error) {
    return sendResponse(res, false, 'Failed to update farm.', error.message);
  }
});

// Soft delete farm (set isActive = false)
exports.deleteFarm = asyncErrorHandler(async (req, res) => {
  try {
    const farm = await Farm.findById(req.params.id);

    if (!farm) return sendResponse(res, false, 'Farm not found.', null, 404);

    farm.isActive = false;
    await farm.save();

    return sendResponse(res, true, 'Farm deleted (soft delete).');
  } catch (error) {
    return sendResponse(res, false, 'Failed to delete farm.', error.message);
  }
});

// Get farms by owner
exports.getFarmsByOwner = asyncErrorHandler(async (req, res) => {
  try {
    const farms = await Farm.find({ owner: req.params.ownerId });
    return sendResponse(res, true, 'Farms by owner fetched.', farms);
  } catch (error) {
    return sendResponse(res, false, 'Failed to fetch farms by owner.', error.message);
  }
});












